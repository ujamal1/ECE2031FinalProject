-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : B800;  -- 	LOADI	0
           001 : 1267;  -- 	STORE	Mode ; Reset the mode on reset
           002 : B808;  -- 	LOADI	8
           003 : 98A0;  -- 	OUT		Neo_All16
           004 : B800;  -- 	LOADI	0
           005 : 9804;  -- 	OUT		Hex0
           006 : B8FF;  -- 	LOADI	255
           007 : 9805;  -- 	OUT		Hex1
           008 : B801;  -- 	LOADI	1
           009 : 9801;  -- 	OUT		LEDs
           00A : 81F9;  -- 	CALL	WaitForButton
           00B : 9000;  -- 	IN		Switches		; Get the values of the switches after
           00C : 9805;  -- 	OUT		Hex1
           00D : 4026;  -- 	JZERO	SetSingle16		; the confirmation button is pressed
           00E : 6FFF;  -- 	ADDI	-1
           00F : 402F;  -- 	JZERO	SetSingle24		; 1
           010 : 6FFF;  -- 	ADDI	-1
           011 : 403A;  -- 	JZERO	SetAll16		; 2
           012 : 6FFF;  -- 	ADDI	-1
           013 : 4042;  -- 	JZERO	AutoIncrement	; 3
           014 : 6FFF;  -- 	ADDI	-1
           015 : 404C;  -- 	JZERO	Game			; 4
           016 : 6FFF;  -- 	ADDI	-1
           017 : 407F;  -- 	JZERO	Gradient		; 5
           018 : 6FFF;  -- 	ADDI	-1
           019 : 40AE;  -- 	JZERO	SnakeGame		; 6
           01A : 6FFF;  -- 	ADDI	-1
           01B : 4022;  -- 	JZERO	Read			; 7
           01C : 6FFF;  -- 	ADDI	-1
           01D : 4024;  -- 	JZERO	Write			; 8
           01E : 281F;  -- 	JUMP    Reset       ; Else, jump to Reset
           01F : B808;  -- 	LOADI	8
           020 : 98A0;  -- 	OUT		Neo_All16
           021 : 2804;  -- 	JUMP	ChooseMode
           022 : 98A5;  -- 	OUT		READ_EN
           023 : 2804;  -- 	JUMP	ChooseMode
           024 : 98A6;  -- 	OUT		WRITE_EN
           025 : 2804;  -- 	JUMP	ChooseMode
           026 : B816;  -- 	LOADI	22
           027 : 6008;  -- 	SHIFT	8
           028 : 6801;  -- 	ADDI	1
           029 : 9804;  -- 	OUT		Hex0
           02A : 81FE;  -- 	CALL	OutAddress
           02B : 8205;  -- 	CALL	GetColors16
           02C : 0A68;  -- 	LOAD	Color16
           02D : 98A2;  -- 	OUT		Neo_Single16
           02E : 2804;  -- 	JUMP	ChooseMode
           02F : B824;  -- 	LOADI	36
           030 : 6008;  -- 	SHIFT	8
           031 : 6801;  -- 	ADDI	1
           032 : 9804;  -- 	OUT		Hex0
           033 : 81FE;  -- 	CALL	OutAddress
           034 : 821C;  -- 	CALL	GetColors24
           035 : 0A69;  -- 	LOAD	Color24_R
           036 : 98A3;  -- 	OUT		Neo_Single24_R
           037 : 0A6A;  -- 	LOAD	Color24_GB
           038 : 98A4;  -- 	OUT		Neo_Single24_GB
           039 : 2804;  -- 	JUMP	ChooseMode
           03A : B816;  -- 	LOADI	22
           03B : 6008;  -- 	SHIFT	8
           03C : 680A;  -- 	ADDI	10
           03D : 9804;  -- 	OUT		Hex0
           03E : 8205;  -- 	CALL	GetColors16
           03F : 0A68;  -- 	LOAD	Color16
           040 : 98A0;  -- 	OUT		Neo_All16
           041 : 2804;  -- 	JUMP	ChooseMode
           042 : B800;  -- 	LOADI 0
           043 : 126B;  -- 	STORE AutoAddress
           044 : 0A6B;  -- 		LOAD	AutoAddress
           045 : 98A1;  -- 		OUT		Neo_Addr
           046 : 8205;  -- 		CALL	GetColors16
           047 : 98A2;  -- 		OUT		Neo_Single16
           048 : 0A6B;  -- 		LOAD	AutoAddress
           049 : 6801;  -- 		ADDI	1
           04A : 126B;  -- 		STORE	AutoAddress
           04B : 2844;  -- 		JUMP IncLoop
           04C : B820;  -- 	LOADI	32
           04D : 9801;  -- 	OUT		LEDs
           04E : 81F9;  -- 	CALL	WaitForButton
           04F : 9000;  -- 	IN		Switches
           050 : 126F;  -- 	STORE	NumNeos				; The value from the switches will be our number of Neopixels to work with for the game
           051 : B801;  -- 	LOADI	1
           052 : 126D;  -- 	STORE	GameDir
           053 : B802;  -- 	LOADI	2
           054 : 126E;  -- 	STORE	GameSpeed
           055 : B800;  -- 	LOADI	0
           056 : 126C;  -- 	STORE	GameAddress
           057 : B800;  -- 	LOADI	0
           058 : 98A0;  -- 	OUT		Neo_All16
           059 : 0A6C;  -- 		LOAD	GameAddress			; If the current address to be set is out of bounds, then the player failed
           05A : 306B;  -- 		JNEG	GameFail			; To be in bounds, the address must be: 0 ≤ address < NumNeos which is the same as 0 ≤ address ≤ NumNeos - 1
           05B : 226F;  -- 		SUB		NumNeos
           05C : 6801;  -- 		ADDI	1
           05D : 386B;  -- 		JPOS	GameFail
           05E : 806E;  -- 		CALL	GameCheckButton
           05F : 0A6C;  -- 			LOAD	GameAddress
           060 : 98A1;  -- 			OUT		Neo_Addr
           061 : B800;  -- 			LOADI	0
           062 : 98A2;  -- 			OUT		Neo_Single16
           063 : 0A6C;  -- 			LOAD	GameAddress
           064 : 1A6D;  -- 			ADD		GameDir
           065 : 126C;  -- 			STORE	GameAddress
           066 : 98A1;  -- 			OUT		Neo_Addr
           067 : 0A98;  -- 			LOAD	Green16
           068 : 98A2;  -- 			OUT		Neo_Single16
           069 : 81F3;  -- 			CALL	Delay			; Wait for a fifth of a second before running the loop again
           06A : 2859;  -- 			JUMP	GameLoop
           06B : 0A99;  -- 		LOAD	Red16
           06C : 98A0;  -- 		OUT		Neo_All16
           06D : 284C;  -- 		JUMP	Game
           06E : 90AF;  -- 		IN		Key1
           06F : 407C;  -- 		JZERO	ExitFunc
           070 : 0A70;  -- 		LOAD	KeyPressed
           071 : 387C;  -- 		JPOS	ExitFunc
           072 : 0A6D;  -- 		LOAD	GameDir
           073 : 3877;  -- 		JPOS	SubDir			; If the GameDir is currently 1, then we should subtract 2 from it to make it -1 by going to SubDir
           074 : 1A6E;  -- 		ADD		GameSpeed		; Otherwise, add 2 to go from -1 -> 1
           075 : 126D;  -- 		STORE	GameDir
           076 : 2879;  -- 		JUMP	IncSpeed
           077 : 226E;  -- 		SUB		GameSpeed
           078 : 126D;  -- 		STORE	GameDir
           079 : 0A6E;  -- 		LOAD	GameSpeed
           07A : 6801;  -- 		ADDI	1
           07B : 126E;  -- 		STORE	GameSpeed
           07C : 90AF;  -- 		IN		Key1
           07D : 1270;  -- 		STORE	KeyPressed
           07E : 8800;  -- 		RETURN
           07F : B840;  -- 	LOADI	64
           080 : 9801;  -- 	OUT		LEDs
           081 : B800;  -- 	LOADI	0
           082 : 98A0;  -- 	OUT		Neo_All16
           083 : B81F;  -- 	LOADI	31
           084 : 1272;  -- 	STORE	GradCounter
           085 : 0A72;  -- 		LOAD	GradCounter
           086 : 3098;  -- 		JNEG	ResetGradCounter
           087 : 98A1;  -- 		OUT		Neo_Addr
           088 : 0A72;  -- 		LOAD	GradCounter
           089 : 600B;  -- 		SHIFT	11
           08A : 1271;  -- 		STORE	GradColor
           08B : 0A72;  -- 		LOAD	GradCounter
           08C : 6005;  -- 		SHIFT	5
           08D : 5271;  -- 		OR		GradColor
           08E : 1271;  -- 		STORE	GradColor
           08F : 0A72;  -- 		LOAD	GradCounter
           090 : 5271;  -- 		OR		GradColor
           091 : 98A2;  -- 		OUT		Neo_Single16
           092 : B801;  -- 		LOADI	1
           093 : 825C;  -- 		CALL	DelayAC
           094 : 0A72;  -- 		LOAD	GradCounter
           095 : 6FFF;  -- 		ADDI	-1
           096 : 1272;  -- 		STORE	GradCounter
           097 : 2885;  -- 		JUMP	Grad16
           098 : B83F;  -- 		LOADI	63
           099 : 1272;  -- 		STORE	GradCounter
           09A : 0A72;  -- 		LOAD	GradCounter
           09B : 6FE0;  -- 		ADDI	-32
           09C : 3004;  -- 		JNEG	ChooseMode
           09D : 0A72;  -- 		LOAD	GradCounter
           09E : 98A1;  -- 		OUT		Neo_Addr
           09F : B83F;  -- 		LOADI	63
           0A0 : 2272;  -- 		SUB		GradCounter
           0A1 : 1271;  -- 		STORE	GradColor
           0A2 : 0A71;  -- 		LOAD	GradColor
           0A3 : 98A3;  -- 		OUT		Neo_Single24_R
           0A4 : 0A71;  -- 		LOAD	GradColor
           0A5 : 6008;  -- 		SHIFT	8
           0A6 : 5271;  -- 		OR		GradColor
           0A7 : 98A4;  -- 		OUT		Neo_Single24_GB
           0A8 : B801;  -- 		LOADI	1
           0A9 : 825C;  -- 		CALL	DelayAC
           0AA : 0A72;  -- 		LOAD	GradCounter
           0AB : 6FFF;  -- 		ADDI	-1
           0AC : 1272;  -- 		STORE	GradCounter
           0AD : 289A;  -- 		JUMP	Grad24
           0AE : B840;  -- 	LOADI	64
           0AF : 9801;  -- 	OUT		LEDs
           0B0 : B801;  -- 	LOADI 1
           0B1 : 127D;  -- 	STORE CurBodySize
           0B2 : B801;  -- 	LOADI 1 ; start moving rightwards
           0B3 : 1277;  -- 	STORE CurDir
           0B4 : 0A88;  -- 	LOAD ScreenWidth
           0B5 : 6011;  -- 	SHIFT -1
           0B6 : 127E;  -- 	STORE Body1X
           0B7 : 0A89;  -- 	LOAD ScreenHeight
           0B8 : 6011;  -- 	SHIFT -1
           0B9 : 127F;  -- 	STORE Body1Y
           0BA : 0A8E;  -- 	LOAD	Background
           0BB : 98A0;  -- 	OUT		Neo_All16
           0BC : 0A7E;  -- 	LOAD Body1X
           0BD : 128A;  -- 	STORE   XYToIndexX
           0BE : 0A7F;  -- 	LOAD Body1Y
           0BF : 128B;  -- 	STORE   XYToIndexY
           0C0 : 81B9;  -- 	CALL    XYToIndex ; get head's index
           0C1 : 4A97;  -- 	AND		EightBits
           0C2 : 98A1;  -- 	OUT		Neo_Addr
           0C3 : 0A8F;  -- 	LOAD	SnakeColor
           0C4 : 98A2;  -- 	OUT		Neo_Single16
           0C5 : 81C8;  -- 	CALL GetNewApplePos
           0C6 : 81E9;  -- 	CALL DrawNewApplePos
           0C7 : B803;  -- 	LOADI 3
           0C8 : 825C;  -- 	CALL DELAYAC ; wait 0.1 seconds
           0C9 : 823B;  --     CALL ReadY
           0CA : 1274;  --     STORE CurReadY
           0CB : 8263;  --     CALL Abs
           0CC : 1293;  --     STORE ReadYAbsTemp
           0CD : 8231;  --     CALL ReadX
           0CE : 1273;  --     STORE CurReadX
           0CF : 8263;  --     CALL Abs
           0D0 : 2293;  --     SUB ReadYAbsTemp ; ACC = abs(readX) - abs(readY)
           0D1 : 38D3;  --     JPOS MoreX ; if readx > ready: go to moreX
           0D2 : 28DC;  -- 	JUMP MoreY ; if ready > go to moreY
           0D3 : 0A73;  --         LOAD CurReadX
           0D4 : 38D6;  -- 		JPOS MoreLeft
           0D5 : 28D9;  -- 		JUMP MoreRight
           0D6 : BFFF;  -- 			LOADI -1
           0D7 : 1278;  -- 			STORE NewDir
           0D8 : 28E5;  --             JUMP DirOutput
           0D9 : B801;  -- 			LOADI 1
           0DA : 1278;  -- 			Store NewDir
           0DB : 28E5;  --             JUMP DirOutput
           0DC : 0A74;  --         LOAD CurReadY
           0DD : 38DF;  -- 		JPOS MoreDown
           0DE : 28E2;  -- 		JUMP MoreUp
           0DF : BFFE;  -- 			LOADI -2
           0E0 : 1278;  -- 			Store NewDir
           0E1 : 28E5;  --             JUMP DirOutput
           0E2 : B802;  -- 			LOADI 2
           0E3 : 1278;  -- 			Store NewDir
           0E4 : 28E5;  --             JUMP DirOutput
           0E5 : 0A78;  -- 		LOAD NewDir
           0E6 : 1A77;  -- 		ADD CurDir
           0E7 : 40EA;  -- 		JZERO SkipSetCurDir ; set curDir = newDir if newDir != opposite of curDir
           0E8 : 0A78;  -- 		LOAD NewDir
           0E9 : 1277;  -- 		STORE CurDir
           0EA : 0A77;  -- 		LOAD CurDir
           0EB : 0A77;  -- 	LOAD CurDir
           0EC : 6FFF;  -- 	ADDI -1
           0ED : 40F8;  -- 	JZERO MovingRight
           0EE : 0A77;  -- 	LOAD CurDir
           0EF : 6801;  -- 	ADDI 1
           0F0 : 40FE;  -- 	JZERO MovingLeft
           0F1 : 0A77;  -- 	LOAD CurDir
           0F2 : 6FFE;  -- 	ADDI -2
           0F3 : 4104;  -- 	JZERO MovingUp
           0F4 : 0A77;  -- 	LOAD CurDir
           0F5 : 6802;  -- 	ADDI 2
           0F6 : 410A;  -- 	JZERO MovingDown
           0F7 : 290A;  -- 	JUMP MovingDown
           0F8 : 0A7E;  -- 		LOAD Body1X
           0F9 : 6801;  -- 		ADDI 1
           0FA : 1275;  -- 		STORE NextX
           0FB : 0A7F;  -- 		LOAD Body1Y
           0FC : 1276;  -- 		STORE NextY
           0FD : 2910;  -- 		JUMP EndMoving
           0FE : 0A7E;  -- 		LOAD Body1X
           0FF : 6FFF;  -- 		ADDI -1
           100 : 1275;  -- 		STORE NextX
           101 : 0A7F;  -- 		LOAD Body1Y
           102 : 1276;  -- 		STORE NextY
           103 : 2910;  -- 		JUMP EndMoving
           104 : 0A7E;  -- 		LOAD Body1X
           105 : 1275;  -- 		STORE NextX
           106 : 0A7F;  -- 		LOAD Body1Y
           107 : 6801;  -- 		ADDI 1
           108 : 1276;  -- 		STORE NextY
           109 : 2910;  -- 		JUMP EndMoving
           10A : 0A7E;  -- 		LOAD Body1X
           10B : 1275;  -- 		STORE NextX
           10C : 0A7F;  -- 		LOAD Body1Y
           10D : 6FFF;  -- 		ADDI -1
           10E : 1276;  -- 		STORE NextY
           10F : 2910;  -- 		JUMP EndMoving
           110 : 0A7D;  -- 	LOAD CurBodySize
           111 : 227C;  -- 	SUB MaxBodySize
           112 : 41B3;  -- 	JZERO SnakeWin ; if curbodysize >= max body size: you win
           113 : 39B3;  -- 	JPOS SnakeWin
           114 : 0A75;  -- 	LOAD NextX
           115 : 31AD;  -- 	JNEG SnakeLose ; if x < 0
           116 : 2288;  -- 	SUB ScreenWidth
           117 : 41AD;  -- 	JZERO SnakeLose ; if x >= width
           118 : 39AD;  -- 	JPOS SnakeLose
           119 : 0A76;  -- 	LOAD NextY
           11A : 31AD;  -- 	JNEG SnakeLose ; if y < 0
           11B : 2289;  -- 	SUB ScreenHeight
           11C : 41AD;  -- 	JZERO SnakeLose ; if y >= height
           11D : 39AD;  -- 	JPOS SnakeLose
           11E : 0A79;  -- 	LOAD AppleX
           11F : 2275;  -- 	SUB NextX
           120 : 3129;  -- 	JNEG NotEatingApple
           121 : 3929;  -- 	JPOS NotEatingApple
           122 : 0A7A;  -- 	LOAD AppleY
           123 : 2276;  -- 	SUB NextY
           124 : 3129;  -- 	JNEG NotEatingApple
           125 : 3929;  -- 	JPOS NotEatingApple
           126 : B801;  -- 	LOADI 1
           127 : 127B;  -- 	STORE EatingApple
           128 : 292C;  -- 	JUMP EndEatingApple
           129 : B800;  -- 	LOADI 0
           12A : 127B;  -- 	STORE EatingApple
           12B : 292C;  -- 	JUMP EndEatingApple
           12C : 0A75;  -- 	LOAD NextX
           12D : 227E;  -- 	SUB Body1X
           12E : 3135;  -- 	JNEG EndBodyCheck1
           12F : 3935;  -- 	JPOS EndBodyCheck1
           130 : 0A76;  -- 	LOAD NextY
           131 : 227F;  -- 	SUB Body1Y
           132 : 3135;  -- 	JNEG EndBodyCheck1
           133 : 3935;  -- 	JPOS EndBodyCheck1
           134 : 29AD;  -- 	JUMP SnakeLose
           135 : 0A75;  -- 	LOAD NextX
           136 : 2280;  -- 	SUB Body2X
           137 : 313E;  -- 	JNEG EndBodyCheck2
           138 : 393E;  -- 	JPOS EndBodyCheck2
           139 : 0A76;  -- 	LOAD NextY
           13A : 2281;  -- 	SUB Body2Y
           13B : 313E;  -- 	JNEG EndBodyCheck2
           13C : 393E;  -- 	JPOS EndBodyCheck2
           13D : 29AD;  -- 	JUMP SnakeLose
           13E : 0A75;  -- 	LOAD NextX
           13F : 2282;  -- 	SUB Body3X
           140 : 3147;  -- 	JNEG EndBodyCheck3
           141 : 3947;  -- 	JPOS EndBodyCheck3
           142 : 0A76;  -- 	LOAD NextY
           143 : 2283;  -- 	SUB Body3Y
           144 : 3147;  -- 	JNEG EndBodyCheck3
           145 : 3947;  -- 	JPOS EndBodyCheck3
           146 : 29AD;  -- 	JUMP SnakeLose
           147 : 0A75;  -- 	LOAD NextX
           148 : 2284;  -- 	SUB Body4X
           149 : 3150;  -- 	JNEG EndBodyCheck4
           14A : 3950;  -- 	JPOS EndBodyCheck4
           14B : 0A76;  -- 	LOAD NextY
           14C : 2285;  -- 	SUB Body4Y
           14D : 3150;  -- 	JNEG EndBodyCheck4
           14E : 3950;  -- 	JPOS EndBodyCheck4
           14F : 29AD;  -- 	JUMP SnakeLose
           150 : 0A7B;  -- 	LOAD EatingApple
           151 : 3953;  -- 	JPOS BodyCheck5 ; if eating apple, check last body part
           152 : 295C;  -- 	JUMP EndBodyCheck5
           153 : 0A75;  -- 	LOAD NextX
           154 : 2286;  -- 	SUB Body5X
           155 : 315C;  -- 	JNEG EndBodyCheck5
           156 : 395C;  -- 	JPOS EndBodyCheck5
           157 : 0A76;  -- 	LOAD NextY
           158 : 2287;  -- 	SUB Body5Y
           159 : 315C;  -- 	JNEG EndBodyCheck5
           15A : 395C;  -- 	JPOS EndBodyCheck5
           15B : 29AD;  -- 	JUMP SnakeLose
           15C : 0A84;  -- 	LOAD Body4X
           15D : 1286;  -- 	STORE Body5X
           15E : 0A85;  -- 	LOAD Body4Y
           15F : 1287;  -- 	STORE Body5Y
           160 : 0A82;  -- 	LOAD Body3X
           161 : 1284;  -- 	STORE Body4X
           162 : 0A83;  -- 	LOAD Body3Y
           163 : 1285;  -- 	STORE Body4Y
           164 : 0A80;  -- 	LOAD Body2X
           165 : 1282;  -- 	STORE Body3X
           166 : 0A81;  -- 	LOAD Body2Y
           167 : 1283;  -- 	STORE Body3Y
           168 : 0A7E;  -- 	LOAD Body1X
           169 : 1280;  -- 	STORE Body2X
           16A : 0A7F;  -- 	LOAD Body1Y
           16B : 1281;  -- 	STORE Body2Y
           16C : 0A75;  -- 	LOAD NextX
           16D : 127E;  -- 	STORE Body1X
           16E : 0A76;  -- 	LOAD NextY
           16F : 127F;  -- 	STORE Body1Y
           170 : 0A75;  -- 	LOAD NextX
           171 : 128A;  -- 	STORE   XYToIndexX
           172 : 0A76;  -- 	LOAD NextY
           173 : 128B;  -- 	STORE   XYToIndexY
           174 : 81B9;  -- 	CALL    XYToIndex ; get head's index
           175 : 4A97;  -- 	AND		EightBits
           176 : 98A1;  -- 	OUT		Neo_Addr
           177 : 0A8F;  -- 	LOAD	SnakeColor
           178 : 98A2;  -- 	OUT		Neo_Single16
           179 : 0A7B;  -- 	LOAD EatingApple
           17A : 397C;  -- 	JPOS IncSize
           17B : 297F;  -- 	JUMP EndIncSize
           17C : 0A7D;  -- 		LOAD CurBodySize ; inc size
           17D : 6801;  -- 		ADDI 1
           17E : 127D;  -- 		STORE CurBodySize
           17F : 0A7B;  -- 	LOAD EatingApple
           180 : 4182;  -- 	JZERO EraseTail ; erase tail if we didnt eat an apple
           181 : 29A4;  -- 	JUMP EndEraseTail
           182 : 0A7D;  -- 		LOAD CurBodySize
           183 : 6FFF;  -- 		ADDI -1
           184 : 418B;  -- 		JZERO EraseBody2 ; if new body size is 1, erase body 2
           185 : 6FFF;  -- 		ADDI -1
           186 : 4190;  -- 		JZERO EraseBody3 ; if new body size is 2, erase body 3, etc...
           187 : 6FFF;  -- 		ADDI -1
           188 : 4195;  -- 		JZERO EraseBody4
           189 : 6FFF;  -- 		ADDI -1
           18A : 419A;  -- 		JZERO EraseBody5
           18B : 0A80;  -- 			LOAD Body2X
           18C : 128A;  -- 			STORE   XYToIndexX
           18D : 0A81;  -- 			LOAD Body2Y
           18E : 128B;  -- 			STORE   XYToIndexY
           18F : 299F;  -- 			JUMP EndEraseBody
           190 : 0A82;  -- 			LOAD Body3X
           191 : 128A;  -- 			STORE   XYToIndexX
           192 : 0A83;  -- 			LOAD Body3Y
           193 : 128B;  -- 			STORE   XYToIndexY
           194 : 299F;  -- 			JUMP EndEraseBody
           195 : 0A84;  -- 			LOAD Body4X
           196 : 128A;  -- 			STORE   XYToIndexX
           197 : 0A85;  -- 			LOAD Body4Y
           198 : 128B;  -- 			STORE   XYToIndexY
           199 : 299F;  -- 			JUMP EndEraseBody
           19A : 0A86;  -- 			LOAD Body5X
           19B : 128A;  -- 			STORE   XYToIndexX
           19C : 0A87;  -- 			LOAD Body5Y
           19D : 128B;  -- 			STORE   XYToIndexY
           19E : 299F;  -- 			JUMP EndEraseBody
           19F : 81B9;  -- 		CALL    XYToIndex ; get old tail's index
           1A0 : 4A97;  -- 		AND		EightBits
           1A1 : 98A1;  -- 		OUT		Neo_Addr
           1A2 : 0A8E;  -- 		LOAD	Background ; set to background color
           1A3 : 98A2;  -- 		OUT		Neo_Single16
           1A4 : 0A7B;  -- 	LOAD EatingApple
           1A5 : 39A7;  -- 	JPOS GetNewApplePosLabel
           1A6 : 29A9;  -- 	JUMP EndGetNewApplePosLabel
           1A7 : 81C8;  -- 		CALL GetNewApplePos
           1A8 : 29A9;  -- 		JUMP EndGetNewApplePosLabel
           1A9 : 81E9;  -- 	CALL DrawNewApplePos
           1AA : 0A7D;  -- 	LOAD CurBodySize
           1AB : 9804;  -- 	OUT Hex0
           1AC : 28C7;  -- 	JUMP SnakeGameLoop
           1AD : 0A90;  -- 	LOAD	LoseColor
           1AE : 98A0;  -- 	OUT		Neo_All16
           1AF : 0A7D;  -- 	LOAD CurBodySize
           1B0 : 9804;  -- 	OUT Hex0
           1B1 : 81F9;  -- 	CALL	WaitForButton
           1B2 : 28AE;  -- 	JUMP 	SnakeGame
           1B3 : 0A91;  --     LOAD	WinColor
           1B4 : 98A0;  -- 	OUT		Neo_All16
           1B5 : 0A7D;  -- 	LOAD CurBodySize
           1B6 : 9804;  -- 	OUT Hex0
           1B7 : 81F9;  -- 	CALL	WaitForButton
           1B8 : 28AE;  -- 	JUMP    SnakeGame
           1B9 : 0A8B;  -- 	LOAD XYToIndexY
           1BA : 4A9A;  -- 	AND Bit0
           1BB : 39C3;  -- 	JPOS XYToIndexOdd
           1BC : 29BD;  -- 	JUMP XYToIndexEven
           1BD : 0A8B;  -- 		LOAD XYToIndexY
           1BE : 6801;  -- 		ADDI 1
           1BF : 6005;  -- 		SHIFT 5
           1C0 : 228A;  -- 		SUB XYToIndexX
           1C1 : 6FFF;  -- 		ADDI -1
           1C2 : 29C7;  -- 		JUMP EndXYToIndex
           1C3 : 0A8B;  -- 		LOAD XYToIndexY
           1C4 : 6005;  -- 		SHIFT 5 ; * 32
           1C5 : 1A8A;  -- 		ADD XYToIndexX
           1C6 : 29C7;  -- 		JUMP EndXYToIndex
           1C7 : 8800;  -- 	RETURN
           1C8 : B801;  -- 	LOADI 1 ; reset prevkey1
           1C9 : 128C;  -- 	STORE PrevKey1
           1CA : B800;  -- 	LOADI 0 ; reset ApplePosCounter
           1CB : 128D;  -- 	STORE ApplePosCounter
           1CC : 0A8D;  -- 		LOAD ApplePosCounter
           1CD : 6801;  -- 		ADDI 1
           1CE : 4A97;  -- 		AND EightBits ; keep within [0-255]
           1CF : 128D;  -- 		STORE ApplePosCounter
           1D0 : 0A8C;  -- 		LOAD PrevKey1
           1D1 : 1294;  -- 		STORE PrevKey1Temp
           1D2 : 90AF;  -- 		IN		Key1
           1D3 : 128C;  -- 		STORE PrevKey1
           1D4 : 41CC;  -- 		JZERO	GetNewApplePosLoop ; user is pressing key1, loop until they let go
           1D5 : 0A94;  -- 		LOAD PrevKey1Temp
           1D6 : 41D8;  -- 		JZERO GetNewApplePosLoopEnd; they used to be pressing key1, finish loop
           1D7 : 29CC;  -- 		JUMP GetNewApplePosLoop
           1D8 : 0A8D;  -- 	LOAD ApplePosCounter
           1D9 : 6013;  -- 	SHIFT -3
           1DA : 4A9C;  -- 	AND LowFiveBits ; XXXXX
           1DB : 1279;  -- 	STORE AppleX
           1DC : 0A8D;  -- 	LOAD ApplePosCounter
           1DD : 4A9B;  -- 	AND LowThreeBits ; YYY
           1DE : 6FFB;  -- 	ADDI -5
           1DF : 39E4;  -- 	JPOS AppleSubTwo
           1E0 : 0A8D;  -- 	LOAD ApplePosCounter
           1E1 : 4A9B;  -- 	AND LowThreeBits
           1E2 : 127A;  -- 	STORE AppleY
           1E3 : 29E8;  -- 	JUMP EndAppleSub
           1E4 : 0A8D;  -- 		LOAD ApplePosCounter
           1E5 : 4A9B;  -- 		AND LowThreeBits
           1E6 : 6FFC;  -- 		ADDI -4
           1E7 : 127A;  -- 		STORE AppleY
           1E8 : 8800;  -- 	RETURN
           1E9 : 0A79;  -- 	LOAD AppleX
           1EA : 128A;  -- 	STORE XYToIndexX
           1EB : 0A7A;  -- 	LOAD AppleY
           1EC : 128B;  -- 	STORE XYToIndexY
           1ED : 81B9;  -- 	CALL    XYToIndex ; get old tail's index
           1EE : 4A97;  -- 	AND		EightBits
           1EF : 98A1;  -- 	OUT		Neo_Addr
           1F0 : 0A92;  -- 	LOAD	FruitColor ; set to fruit color
           1F1 : 98A2;  -- 	OUT		Neo_Single16
           1F2 : 8800;  -- 	RETURN
           1F3 : 9802;  -- 	OUT    Timer
           1F4 : 806E;  -- 	CALL	GameCheckButton
           1F5 : 9002;  -- 	IN		Timer
           1F6 : 6FFF;  -- 	ADDI	-1
           1F7 : 31F4;  -- 	JNEG	GameWaitingLoop
           1F8 : 8800;  -- 	RETURN
           1F9 : 90AF;  -- 	IN		Key1
           1FA : 39F9;  -- 	JPOS	WaitForButton	; Button is not pressed, check again
           1FB : 90AF;  -- 		IN		Key1		; Button was just pressed, wait for it to be released
           1FC : 41FB;  -- 		JZERO	WaitForRelease
           1FD : 8800;  -- 	RETURN
           1FE : B802;  -- 	LOADI	2
           1FF : 9801;  -- 	OUT		LEDs
           200 : 81F9;  -- 	CALL	WaitForButton
           201 : 9000;  -- 	IN		Switches
           202 : 4A97;  -- 	AND		EightBits		; Mask off the rightmost eight bits to fit the
           203 : 98A1;  -- 	OUT		Neo_Addr		; address length and store them in the peripheral
           204 : 8800;  -- 	RETURN
           205 : B804;  -- 	LOADI	4
           206 : 9801;  -- 	OUT		LEDs
           207 : 81F9;  -- 	CALL	WaitForButton
           208 : 9000;  -- 	IN		Switches
           209 : 4A95;  -- 	AND		FiveBits
           20A : 600B;  -- 	SHIFT	11
           20B : 1268;  -- 	STORE	Color16
           20C : B808;  -- 	LOADI	8
           20D : 9801;  -- 	OUT		LEDs
           20E : 81F9;  -- 	CALL	WaitForButton
           20F : 9000;  -- 	IN		Switches
           210 : 4A96;  -- 	AND		SixBits
           211 : 6005;  -- 	SHIFT	5
           212 : 5268;  -- 	OR		Color16
           213 : 1268;  -- 	STORE	Color16
           214 : B810;  -- 	LOADI	16
           215 : 9801;  -- 	OUT		LEDs
           216 : 81F9;  -- 	CALL	WaitForButton
           217 : 9000;  -- 	IN		Switches
           218 : 4A95;  -- 	AND		FiveBits
           219 : 5268;  -- 	OR		Color16
           21A : 1268;  -- 	STORE	Color16
           21B : 8800;  -- 	RETURN
           21C : B804;  -- 	LOADI	4
           21D : 9801;  -- 	OUT		LEDs
           21E : 81F9;  -- 	CALL	WaitForButton
           21F : 9000;  -- 	IN		Switches
           220 : 4A97;  -- 	AND		EightBits
           221 : 1269;  -- 	STORE	Color24_R
           222 : B808;  -- 	LOADI	8
           223 : 9801;  -- 	OUT		LEDs
           224 : 81F9;  -- 	CALL	WaitForButton
           225 : 9000;  -- 	IN		Switches
           226 : 4A97;  -- 	AND		EightBits
           227 : 6008;  -- 	SHIFT	8
           228 : 126A;  -- 	STORE	Color24_GB
           229 : B810;  -- 	LOADI	16
           22A : 9801;  -- 	OUT		LEDs
           22B : 81F9;  -- 	CALL	WaitForButton
           22C : 9000;  -- 	IN		Switches
           22D : 4A97;  -- 	AND		EightBits
           22E : 526A;  -- 	OR		Color24_GB
           22F : 126A;  -- 	STORE	Color24_GB
           230 : 8800;  -- 	RETURN
           231 : 824F;  -- 	CALL   BlockI2C    ; ensure bus is idle
           232 : 0AA2;  -- 	LOAD   I2CRCmd     ; load read command
           233 : 9890;  -- 	OUT    I2C_CMD     ; send read command to I2C_CMD register
           234 : 0AA3;  -- 	LOAD   AccXAddr    ; load ADXL345 register address for X acceleration 
           235 : 9891;  -- 	OUT    I2C_DATA    ; send to I2C_DATA register
           236 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           237 : 824F;  -- 	CALL   BlockI2C    ; wait for it to finish
           238 : 9091;  -- 	IN     I2C_data    ; put the data in AC
           239 : 8245;  -- 	CALL   SwapBytes   ; bytes are returned in wrong order; swap them
           23A : 8800;  -- 	RETURN
           23B : 824F;  -- 	CALL   BlockI2C    ; ensure bus is idle
           23C : 0AA2;  -- 	LOAD   I2CRCmd     ; load read command
           23D : 9890;  -- 	OUT    I2C_CMD     ; send read command to I2C_CMD register
           23E : 0AA4;  -- 	LOAD   AccYAddr    ; load ADXL345 register address for X acceleration 
           23F : 9891;  -- 	OUT    I2C_DATA    ; send to I2C_DATA register
           240 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           241 : 824F;  -- 	CALL   BlockI2C    ; wait for it to finish
           242 : 9091;  -- 	IN     I2C_data    ; put the data in AC
           243 : 8245;  -- 	CALL   SwapBytes   ; bytes are returned in wrong order; swap them
           244 : 8800;  -- 	RETURN
           245 : 124D;  -- 	STORE  SBT1
           246 : 6008;  -- 	SHIFT  8
           247 : 124E;  -- 	STORE  SBT2
           248 : 0A4D;  -- 	LOAD   SBT1
           249 : 6018;  -- 	SHIFT  -8
           24A : 4A9D;  -- 	AND    LoByte
           24B : 524E;  -- 	OR     SBT2
           24C : 8800;  -- 	RETURN
           24D : 0000;  -- SBT1: DW 0
           24E : 0000;  -- SBT2: DW 0
           24F : 0A9F;  -- 	LOAD   Zero
           250 : 12A5;  -- 	STORE  I2CTemp        ; Used to check for timeout
           251 : 0AA5;  -- 	LOAD   I2CTemp
           252 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           253 : 12A5;  -- 	STORE  I2CTemp
           254 : 4258;  -- 	JZERO  I2CError    ; Timeout occurred; error
           255 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           256 : 3A51;  -- 	JPOS   BI2CL       ; If not 0, try again
           257 : 8800;  -- 	RETURN             ; Else return
           258 : 0A9F;  -- 	LOAD   Zero
           259 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           25A : 9804;  -- 	OUT    Hex0        ; display error message
           25B : 2A58;  -- 	JUMP   I2CError
           25C : 1262;  -- 	STORE  DelayTime   ; Save the desired delay
           25D : 9802;  -- 	OUT    Timer       ; Reset the timer
           25E : 9002;  -- 	IN     Timer       ; Get the current timer value
           25F : 2262;  -- 	SUB    DelayTime
           260 : 325E;  -- 	JNEG   WaitingLoop ; Repeat until timer = delay value
           261 : 8800;  -- 	RETURN
           262 : 0000;  -- DelayTime: DW 0
           263 : 3A66;  -- 	JPOS   Abs_r
           264 : 5AA0;  -- 	XOR    NegOne       ; Flip all bits
           265 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate 2's complement number)
           266 : 8800;  -- 	RETURN
           267 : 0000;  -- Mode:			DW 0
           268 : 0000;  -- Color16:		DW 0
           269 : 0000;  -- Color24_R:		DW 0
           26A : 0000;  -- Color24_GB:		DW 0
           26B : 0000;  -- AutoAddress:	DW 0
           26C : 0000;  -- GameAddress:	DW 0
           26D : 0000;  -- GameDir:		DW 0 ; Game Direction
           26E : 0000;  -- GameSpeed:		DW 0
           26F : 0000;  -- NumNeos:		DW 0
           270 : 0000;  -- KeyPressed:		DW 0
           271 : 0000;  -- GradColor:		DW 0
           272 : 0000;  -- GradCounter:	DW 0
           273 : 0000;  -- CurReadX: DW 0
           274 : 0000;  -- CurReadY: DW 0
           275 : 0000;  -- NextX:    DW 0
           276 : 0000;  -- NextY:    DW 0
           277 : 0000;  -- CurDir:   DW 0
           278 : 0000;  -- NewDir:   DW 0
           279 : 0000;  -- AppleX:   DW 0
           27A : 0000;  -- AppleY:   DW 0
           27B : 0000;  -- EatingApple: DW 0
           27C : 0005;  -- MaxBodySize: DW 5 ; constant value    board is 32 wide, 6 tall
           27D : 0001;  -- CurBodySize:   DW 1
           27E : 0010;  -- Body1X:        DW 16 ; this is head
           27F : 0003;  -- Body1Y:        DW 3
           280 : 0000;  -- Body2X:        DW 0
           281 : 0000;  -- Body2Y:        DW 0
           282 : 0000;  -- Body3X:        DW 0
           283 : 0000;  -- Body3Y:        DW 0
           284 : 0000;  -- Body4X:        DW 0
           285 : 0000;  -- Body4Y:        DW 0
           286 : 0000;  -- Body5X:        DW 0
           287 : 0000;  -- Body5Y:        DW 0
           288 : 0020;  -- ScreenWidth: DW 32
           289 : 0006;  -- ScreenHeight: DW 6
           28A : 0000;  -- XYToIndexX:   DW 0
           28B : 0000;  -- XYToIndexY:   DW 0
           28C : 0000;  -- PrevKey1:     DW 0
           28D : 0000;  -- ApplePosCounter: DW 0
           28E : 1863;  -- Background:  DW &B0001100001100011 ; dim white
           28F : FFE0;  -- SnakeColor:  DW &B1111111111100000 ; yellow
           290 : F800;  -- LoseColor:   DW &B1111100000000000 ; red
           291 : 07E0;  -- WinColor:    DW &B0000011111100000 ; green
           292 : F800;  -- FruitColor:  DW &B1111100000000000 ; red
           293 : 0000;  -- ReadYAbsTemp: DW 0
           294 : 0000;  -- PrevKey1Temp: DW 0
           295 : 001F;  -- FiveBits:	DW	31
           296 : 003F;  -- SixBits:	DW	63
           297 : 00FF;  -- EightBits:	DW	255
           298 : 07E0;  -- Green16:	DW	&B11111100000;
           299 : F800;  -- Red16:		DW	&B1111100000000000;
           29A : 0001;  -- Bit0:      DW &B0000000001
           29B : 0007;  -- LowThreeBits: DW &B111
           29C : 001F;  -- LowFiveBits: DW &B11111
           29D : 00FF;  -- LoByte:    DW &H00FF
           29E : FF00;  -- HiByte:    DW &HFF00
           29F : 0000;  -- Zero:      DW 0
           2A0 : FFFF;  -- NegOne:    DW -1
           2A1 : 203A;  -- I2CWCmd:  DW &H203A    ; write two i2c bytes, addr 0x3A
           2A2 : 123A;  -- I2CRCmd:  DW &H123A    ; write one byte, read two bytes, addr 0x3A
           2A3 : 0032;  -- AccXAddr: DW &H32      ; X acceleration register address.
           2A4 : 0034;  -- AccYAddr: DW &H34      ; X acceleration register address.
           2A5 : 0000;  -- I2CTemp:  DW 0
  END;
